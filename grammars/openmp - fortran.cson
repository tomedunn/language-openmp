'comment': 'OpenMP rules for Fortran.'
'scopeName': 'source.openmp'
'fileTypes': []
'injectionSelector': 'source.fortran comment'
'patterns': [
  {
    'name': 'meta.openmp.directive'
    'begin': '(?i)\\G(\\$(omp\\b)?)'
    'beginCaptures':
      '1': 'name': 'keyword.control.openmp'
    'end': '(?=[$\\n])'
    'patterns':[
      {'include': '#environment-variables'}
      {'include': '#intrinsic-functions'}
      {'include': '#operators'}
      {'include': '#synchronization-constructs'}
      {'include': '#end-directives'}
      {'include': '#directives'}
      {'include': '#clauses'}
    ]
  }
]
'repository':
  # clauses:
  'clauses':
    'patterns':[
      {
        'begin': '(?i)\\b(collapse)\\s*(\\()'
        'beginCaptures':
          '1': 'name': 'keyword.control.openmp'
          '2': 'name': 'punctuation.parentheses.left.openmp'
        'end': '(\\))'
        'endCaptures':
          '1': 'name': 'punctuation.parentheses.right.openmp'
        'patterns':[
          {
            'name': 'constant.numeric.openmp'
            'match': '\\G\\s*\\d+'
          }
          {'include': '#invalid-word'}
        ]
      }
      {
        'begin': '(?i)\\b(copyin)\\s*(\\()'
        'beginCaptures':
          '1': 'name': 'keyword.control.openmp'
          '2': 'name': 'punctuation.parentheses.left.openmp'
        'end': '(\\))'
        'endCaptures':
          '1': 'name': 'punctuation.parentheses.right.openmp'
        'patterns':[
          {'include': '#variable-list'}
        ]
      }
      {
        'begin': '(?i)\\b(default)\\s*(\\()'
        'beginCaptures':
          '1': 'name': 'keyword.control.openmp'
          '2': 'name': 'punctuation.parentheses.left.openmp'
        'end': '(\\))'
        'endCaptures':
          '1': 'name': 'punctuation.parentheses.right.openmp'
        'patterns':[
          {
            'name': 'keyword.control.openmp'
            'match': '(?i)\\G(firstprivate|none|private|shared)'
          }
          {'include': '#invalid-word'}
        ]
      }
      {
        'begin': '(?i)\\b(firstprivate)\\s*(\\()'
        'beginCaptures':
          '1': 'name': 'keyword.control.openmp'
          '2': 'name': 'punctuation.parentheses.left.openmp'
        'end': '(\\))'
        'endCaptures':
          '1': 'name': 'punctuation.parentheses.right.openmp'
        'patterns':[
          {'include': '#variable-list'}
        ]
      }
      {
        'begin': '(?i)\\b(if)\\s*(\\()'
        'beginCaptures':
          '1': 'name': 'keyword.control.openmp'
          '2': 'name': 'punctuation.parentheses.left.openmp'
        'end': '(\\))'
        'endCaptures':
          '1': 'name': 'punctuation.parentheses.right.openmp'
        'patterns':[
          {'include': '$self'}
        ]
      }
      {
        'begin': '(?i)\\b(lastprivate)\\s*(\\()'
        'beginCaptures':
          '1': 'name': 'keyword.control.openmp'
          '2': 'name': 'punctuation.parentheses.left.openmp'
        'end': '(\\))'
        'endCaptures':
          '1': 'name': 'punctuation.parentheses.right.openmp'
        'patterns':[
          {'include': '#variable-list'}
        ]
      }
      {
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(ordered)\\b'
      }
      {
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(nowait)\\b'
      }
      {
        'begin': '(?i)\\b(num_threads)\\s*(\\()'
        'beginCaptures':
          '1': 'name': 'keyword.control.openmp'
          '2': 'name': 'punctuation.parentheses.left.openmp'
        'end': '(\\))'
        'endCaptures':
          '1': 'name': 'punctuation.parentheses.right.openmp'
        'patterns':[
          {'include': '$self'}
        ]
      }
      {
        'begin': '(?i)\\b(private)\\s*(\\()'
        'beginCaptures':
          '1': 'name': 'keyword.control.openmp'
          '2': 'name': 'punctuation.parentheses.left.openmp'
        'end': '(\\))'
        'endCaptures':
          '1': 'name': 'punctuation.parentheses.right.openmp'
        'patterns':[
          {'include': '#variable-list'}
        ]
      }
      {
        'begin': '(?i)\\b(proc_bind)\\s*(\\()'
        'beginCaptures':
          '1': 'name': 'keyword.control.openmp'
          '2': 'name': 'punctuation.parentheses.left.openmp'
        'end': '(\\))'
        'endCaptures':
          '1': 'name': 'punctuation.parentheses.right.openmp'
        'patterns':[
          {
            'name': 'keyword.control.openmp'
            'match': '(?i)\\G(close|master|spread)'
          }
          {'include': '#invalid-word'}
        ]
      }
      {
        'begin': '(?i)\\b(reduction)\\s*(\\()'
        'beginCaptures':
          '1': 'name': 'keyword.control.openmp'
          '2': 'name': 'punctuation.parentheses.left.openmp'
        'end': '(\\))'
        'endCaptures':
          '1': 'name': 'punctuation.parentheses.right.openmp'
        'patterns':[
          {
            'begin': '\\G(?=\\s*[^\\)\\n])'
            'end': '(:)|(?=\\))'
            'endCaptures':
              '1': 'name': 'operator.colon.openmp'
            'patterns':[
              {
                'name': 'keyword.control.openmp'
                'match': '(?i)\\G\\s*(\\+|\\-|\\*|\\.and\\.|\\.or\\.|\\.eqv\\.|\\.neqv\\.|\\b(max|min|iand|ior|ieor)\\b)'
              }
              {'include': '#invalid-word'}
            ]
          }
          {'include': '#variable-list'}
        ]
      }
      {
        'begin': '(?i)\\b(schedule)\\s*(\\()'
        'beginCaptures':
          '1': 'name': 'keyword.control.openmp'
          '2': 'name': 'punctuation.parentheses.left.openmp'
        'end': '(\\))'
        'endCaptures':
          '1': 'name': 'punctuation.parentheses.right.openmp'
        'patterns':[
          {
            'begin': '(?i)\\G\\s*(dynamic|guided|static)\\b'
            'beginCaptures':
              '1': 'name': 'keyword.control.openmp'
            'end': '(?=\\))'
            'patterns':[
              {
                'begin': '\\G\\s*(,)'
                'beginCaptures':
                  '1': 'name': 'punctuation.comma.openmp'
                'end': '(?=\\))'
              }
              {'include': '#invalid-word'}
            ]
          }
          {
            'name': 'keyword.control.openmp'
            'match': '(?i)\\G\\s*\\b(auto|runtime)\\b'
          }
          {'include': '#invalid-word'}
        ]
      }
      {
        'begin': '(?i)\\b(shared)\\s*(\\()'
        'beginCaptures':
          '1': 'name': 'keyword.control.openmp'
          '2': 'name': 'punctuation.parentheses.left.openmp'
        'end': '(\\))'
        'endCaptures':
          '1': 'name': 'punctuation.parentheses.right.openmp'
        'patterns':[
          {'include': '#variable-list'}
        ]
      }
    ]
  # directives:
  'directives':
    'patterns':[
      {
        'comment': 'do-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(do(\\s*simd)?)\\b'
      }
      {
        'comment': 'declare-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(declare(\\s*reduction|\\s*simd|\\s*target)?)\\b'
      }
      {
        'comment': 'distribute-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(distribute(\\s*parallel\\s*do)?(\\s*simd)?)\\b'
      }
      {
        'comment': 'parallel-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(parallel(\\s*do(\\s*simd)?|\\s*sections|\\s*workshare)?)\\b'
      }
      {
        'comment': 'target-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(target(\\s*data|teams(\\s*distribute(\\s*parallel\\s*do)?(\\s*simd)?)?|\\s*update)?)\\b'
      }
      {
        'comment': 'teams-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(teams(\\s*distribute(\\s*parallel\\s*do)?(\\s*simd)?)?)\\b'
      }
      {
        'comment': 'shared-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(shared)\\b'
      }
      {
        'comment': 'single-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(single)\\b'
      }
      {
        'comment': 'task-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(task)\\b'
      }
      {
        'comment': 'workshare-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(workshare)\\b'
      }
    ]
  # end directives:
  'end-directives':
    'patterns':[
      {
        'comment': 'end-atomic-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(end\\s*atomic)\\b'
      }
      {
        'comment': 'end-distribute-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(end\\s*distribute(\\s*parallel\\s*do)?(\\s*simd)?)\\b'
      }
      {
        'comment': 'end-do-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(end\\s*do(\\s*simd)?)\\b'
      }
      {
        'comment': 'end-parallel-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(end\\s*parallel(\\s*do(\\s*simd)?|\\s*sections|\\s*workshare)?)\\b'
      }
      {
        'comment': 'end-sections-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(end\\s*sections)\\b'
      }
      {
        'comment': 'end-simd-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(end\\s*simd)\\b'
      }
      {
        'comment': 'end-single-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(end\\s*single)\\b'
      }
      {
        'comment': 'end-target-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(end\\s*target(\\s*data|\\s*teams(\\s*distribute(\\s*parallel\\s*do)?(\\s*simd)?)?|\\s*update)?)\\b'
      }
      {
        'comment': 'end-task-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(end\\s*task)\\b'
      }
      {
        'comment': 'end-teams-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(end\\s*teams(\\s*distribute(\\s*parallel\\s*do)?(\\s*simd)?)?)\\b'
      }
      {
        'comment': 'end-workshare-directive'
        'name': 'keyword.control.openmp'
        'match': '(?i)\\b(end\\s*workshare)\\b'
      }
    ]
  # environment variables:
  'environment-variables':
    'patterns':[
      {
        'name': 'variable.parameter.openmp'
        'match': '(?i)\\b(omp_dynamic)\\b'
      }
      {
        'name': 'variable.parameter.openmp'
        'match': '(?i)\\b(omp_nested)\\b'
      }
      {
        'name': 'variable.parameter.openmp'
        'match': '(?i)\\b(omp_num_threads)\\b'
      }
      {
        'name': 'variable.parameter.openmp'
        'match': '(?i)\\b(omp_schedule)\\b'
      }
      {
        'name': 'variable.parameter.openmp'
        'match': '(?i)\\b(omp_proc_bind)\\b'
      }
      {
        'name': 'variable.parameter.openmp'
        'match': '(?i)\\b(omp_stacksize)\\b'
      }
      {
        'name': 'variable.parameter.openmp'
        'match': '(?i)\\b(omp_wait_policy)\\b'
      }
      {
        'name': 'variable.parameter.openmp'
        'match': '(?i)\\b(omp_thread_limit)\\b'
      }
      {
        'name': 'variable.parameter.openmp'
        'match': '(?i)\\b(omp_max_active_levels)\\b'
      }
      {
        'name': 'variable.parameter.openmp'
        'match': '(?i)\\b(omp_places)\\b'
      }
      {
        'name': 'variable.parameter.openmp'
        'match': '(?i)\\b(omp_cancelation)\\b'
      }
      {
        'name': 'variable.parameter.openmp'
        'match': '(?i)\\b(omp_default_device)\\b'
      }
    ]
  # functions:
  'intrinsic-functions':
    'patterns':[
      {
        'begin': '(?i)\\b(omp_get_(active_levels|cancelation|level|proc_bind|thread_limit))\\s*(\\()'
        'beginCaptures':
          '1': 'name': 'support.function.intrinsic.openmp'
          '2': 'name': 'punctuation.parentheses.left.openmp'
        'end': '(\\))'
        'endCaptures':
          '1': 'name': 'punctuation.parentheses.left.openmp'
        'patterns':[
          {'include': '$self'}
        ]
      }
      {
        'begin': '(?i)\\b(omp_(get|set)_(default_device|dynamic|max_active_levels|nested|num_threads|schedule))\\s*(\\()'
        'beginCaptures':
          '1': 'name': 'support.function.intrinsic.openmp'
          '2': 'name': 'punctuation.parentheses.left.openmp'
        'end': '(\\))'
        'endCaptures':
          '1': 'name': 'punctuation.parentheses.left.openmp'
        'patterns':[
          {'include': '$self'}
        ]
      }
    ]
  # operators:
  'operators':
    'comment': 'Operator that allows a line to be continued on the next line.'
    'patterns':[
      {
        'match': '\\G\\s*(&)'
        'captures':
          '1': 'name': 'keyword.operator.line-continuation.openmp'
      }
      {
        'contentName': 'meta.line-continuation.openmp'
        'begin': '\\s*(&)'
        'beginCaptures':
          '1': 'name': 'keyword.operator.line-continuation.openmp'
        'end': '(?i)^(?:\\s*(&))?'
        'endCaptures':
          '1': 'name': 'keyword.operator.line-continuation.openmp'
        'patterns':[
          {
            'name': 'invalid.error.openmp'
            'match': '\\S*'
          }
        ]
      }
    ]
  #synchronization constructs:
  'synchronization-constructs':
    'patterns':[
      {
        'begin': '(?ix)
          \\G\\s+(
             barrier
            |(end\\s*)?master
            |(end\\s*)?ordered
            |(end\\s*)?task\\s*group
            |taskwait
          )\\b'
        'beginCaptures':
          '1': 'name': 'keyword.control.openmp'
        'end': '(?=[$\\n])'
        'patterns':[
          {'include': '#invalid-word'}
        ]
      }
      {
        'begin': '(?i)\\G\\s+(flush)\\b'
        'beginCaptures':
          '1': 'name': 'keyword.control.openmp'
        'end': '(?=[$\\n])'
        'patterns':[
          {'include': '$self'}
        ]
      }
      {
        'begin': '(?i)\\G\\s+(atomic)\\b'
        'beginCaptures':
          '1': 'name': 'keyword.control.openmp'
        'end': '(?=[$\\n])'
        'patterns':[
          {
            'begin': '(?i)\\G\\s+(capture|read|write|update)\\b'
            'beginCaptures':
              '1': 'name': 'keyword.control.openmp'
            'end': '(?=[$\\n])'
            'patterns':[
              {
                'name': 'keyword.control.openmp'
                'match': '(?i)\\G\\s+(seq_cst)\\b'
              }
              {'include': '#invalid-word'}
            ]
          }
          {
            'name': 'keyword.control.openmp'
            'match': '(?i)\\G\\s+(seq_cst)\\b'
          }
          {'include': '#invalid-word'}
        ]
      }
      {
        'begin': '(?i)\\G\\s+(cancel)\\b'
        'beginCaptures':
          '1': 'name': 'keyword.control.openmp'
        'end': '(?=[$\\n])'
        'patterns':[
          {
            'begin': '(?i)\\G\\s+(do|parallel|sections|taskgroup)\\b'
            'beginCaptures':
              '1': 'name': 'keyword.control.openmp'
            'end': '(?=[$\\n])'
            'patterns':[
              # if clause
            ]
          }
          {'include': '#invalid-word'}
        ]
      }
      {
        'begin': '(?i)\\G\\s+(cancellation\\s+point)\\b'
        'beginCaptures':
          '1': 'name': 'keyword.control.openmp'
        'end': '(?=[$\\n])'
        'patterns':[
          {
            'name': 'keyword.control.openmp'
            'match': '(?i)\\G\\s+(do|parallel|sections|taskgroup)\\b'
          }
          {'include': '#invalid-word'}
        ]
      }
      {
        'begin': '(?i)\\G\\s+((end\\s*)?critical)\\b'
        'beginCaptures':
          '1': 'name': 'keyword.control.openmp'
        'end': '(?=[$\\n])'
        'patterns':[
          # name
        ]
      }
    ]
  #other:
  'invalid-word':
    'name': 'invalid.error.openmp'
    'match': '(?i)\\b\\w+\\b'
